@* File: Pages/second_customer_page.cshtml *@
@page "/{stationId:int}/{pumpId:int}/CustomerPage/{fuel}"
@model SecondCustomerPageModel
@{
    Layout = "_Layout";
    ViewData["Title"] = "Second Customer Page";
}

<style>
    body { background: #D9D9D9; }

    .content-wrapper {
        min-height: calc(100vh - 220px);
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        text-align: center;
    }

    .available-diesel {
        position: fixed;
        top: 90px;
        right: 20px;
        font-size: 1.3rem;
        background: #ffffff;
        padding: 8px 12px;
        border: 1px solid #ccc;
        border-radius: 6px;
        z-index: 1031;
    }

    #dieselAmount {
        width: 300px;
        max-width: 90vw;
        padding: 15px 20px;
        font-size: 1.5rem;
        border: 1px solid #ccc;
        border-radius: 8px;
    }
    #dieselAmount::-webkit-outer-spin-button,
    #dieselAmount::-webkit-inner-spin-button { -webkit-appearance: none; margin: 0; }
    #dieselAmount[type=number] { -moz-appearance: textfield; }

    #totalPrice {
        width: 300px;
        padding: 12px;
        font-size: 1.4rem;
        border: none;
        background: #fff;
        font-weight: 600;
        margin-top: 10px;
    }

    .proceed-button {
        position: fixed;
        left: 50%;
        bottom: 80px;
        transform: translateX(-50%);
        background: #28a745;
        color: #ffffff;
        border: none;
        padding: 15px 40px;
        font-size: 1.3rem;
        border-radius: 10px;
        cursor: pointer;
    }
</style>

<div class="available-diesel">
    Available litres: @Model.AvailableLitres
</div>

<div class="content-wrapper">
    <div class="input-container">
        <label for="dieselAmount" class="mb-2">Enter Diesel Amount (litres):</label><br/>
        <input type="number" id="dieselAmount" min="1" required />

        <label class="d-block mt-3">Total Price (PLN):</label>
        <input type="text" id="totalPrice" readonly />
    </div>

    <h2>Fuel Type: @Model.Fuel</h2>
</div>

<button id="proceedButton" class="proceed-button" type="button">Proceed to Payment</button>

@section Scripts {
<script>
    // ─── server‑provided rates ───
    const pricePerLitre = @(Model.PricePerLitre.ToString("F2", System.Globalization.CultureInfo.InvariantCulture));
    const taxPerLitre   = @(Model.TaxPerLitre.ToString("F2", System.Globalization.CultureInfo.InvariantCulture));

    // IDs & fuel from the route
    const stationId = '@RouteData.Values["stationId"]';
    const pumpId    = '@RouteData.Values["pumpId"]';
    const fuelType  = '@Model.Fuel';

    const amountBox = document.getElementById('dieselAmount');
    const totalBox  = document.getElementById('totalPrice');

    /* helper: write a short‑lived cookie */
    function setCookie(name, value, maxSeconds) {
        document.cookie = `${name}=${value}; path=/; max-age=${maxSeconds}`;
    }

    function updateTotal() {
        const litres = parseFloat(amountBox.value);
        if (isNaN(litres) || litres <= 0) {
            totalBox.value = '';
            return;
        }
        const total = (pricePerLitre + taxPerLitre) * litres;
        totalBox.value = total.toFixed(2);
    }

    amountBox.addEventListener('input', updateTotal);

    document.getElementById('proceedButton').addEventListener('click', () => {
        const litres = parseFloat(amountBox.value);
        if (isNaN(litres) || litres <= 0) {
            alert('Please enter a valid amount.');
            return;
        }
        const total = totalBox.value;
        // store total in a 10‑minute cookie
        setCookie('TotalPrice', total, 600);

        const url = `/PaymentPage?stationId=${stationId}&pumpId=${pumpId}` +
                    `&fuel=${encodeURIComponent(fuelType)}` +
                    `&litres=${litres}`; // total omitted from URL
        window.location.href = url;
    });
</script>
}
